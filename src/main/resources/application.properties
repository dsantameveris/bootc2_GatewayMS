#Application Name
spring.application.name = gatewayservice

#Working Port
server.port = 8000

#Gateway service not register on eureka
eureka.client.registerWithEureka = false

#Eureka service URL
#eureka.client.serviceUrl.defaultZone= http://localhost:8001/eureka/

#Eureka service URL
eureka.client.serviceUrl.defaultZone= http://192.168.99.100:8001/eureka/

#This line makes discovery service to identify names in lowercase
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

#This allows the gateway to read all services registered on Eureka Server
spring.cloud.gateway.discovery.locator.enabled = true

#For /Refresh endpoint to update changes in properties
management.endpoints.web.exposure.include=*

#GATEWAY CONFIG

#PERSONAL CLIENTS ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[0].id = personalclientservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[0].predicates[0] = Path=/pclients/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[0].uri = lb://PERSONALCLIENTSERVICE/pclients

#BUSINESS CLIENTS ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[1].id = businessclientservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[1].predicates[0] = Path=/bclients/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[1].uri = lb://192.168.99.100:8012/bclients

#SAVINGS ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[2].id = savingaccountservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[2].predicates[0] = Path=/savingacc/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[2].uri = lb://192.168.99.100:8013/savingacc

#CHECK ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[3].id = checkaccountservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[3].predicates[0] = Path=/checkacc/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[3].uri = lb://192.168.99.100:8014/checkacc

#TERM ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[4].id = termaccountservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[4].predicates[0] = Path=/termacc/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[4].uri = lb://192.168.99.100:8015/termacc

#LOANS ROUTING
#Name of the route.
spring.cloud.gateway.routes[5].id = loanservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[5].predicates[0] = Path=/loan/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[5].uri = lb://192.168.99.100:8016/loan

#CREDIT CARD ROUTING
#Name of the route.
spring.cloud.gateway.routes[6].id = creditcardservice
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[6].predicates[0] = Path=/creditcard/**
#URI to the service wanted. It uses Eureka Discovery service to match thewanted service.
spring.cloud.gateway.routes[6].uri = lb://CREDITCARDSERVICE/creditcard

#CONSULT ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[7].id = consultservicep
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[7].predicates[0] = Path=/consult/pclients/**
#URI to the service wanted. It uses Eureka Discovery service to match the wanted service.
spring.cloud.gateway.routes[7].uri = lb://CONSULTSERVICE/pclients

#CONSULT ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[8].id = consultserviceb
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[8].predicates[0] = Path=/consult/bclients/**
#URI to the service wanted. It uses Eureka Discovery service to match the wanted service.
spring.cloud.gateway.routes[8].uri = lb://CONSULTSERVICE/bclients

#TRANSFER ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[9].id = transferservicep
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[9].predicates[0] = Path=/transfer/pclients/**
#URI to the service wanted. It uses Eureka Discovery service to match the wanted service.
spring.cloud.gateway.routes[9].uri = lb://CONSULTSERVICE/pclients

#TRANSFER ACCOUNT ROUTING
#Name of the route.
spring.cloud.gateway.routes[10].id = transferserviceb
#URI send to the gateway by the user. ** its a token when read.
spring.cloud.gateway.routes[10].predicates[0] = Path=/transfer/bclients/**
#URI to the service wanted. It uses Eureka Discovery service to match the wanted service.
spring.cloud.gateway.routes[10].uri = lb://CONSULTSERVICE/bclients

